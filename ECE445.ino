#include <stdio.h>

#define EMPTY 0
#define CIRCLE 1
#define CROSS 2

int Max7219_pinCLK = 10;
int Max7219_pinCS = 9;
int Max7219_pinDIN = 8;

/*Patterns Dictionary*/
unsigned char pattern[3][8] = {
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x41,0x22,0x14,0x08,0x14,0x22,0x41},
  {0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C}
};

/*Game Status*/
unsigned char LED_status[9] = {
   2,2,2,
   2,2,2,
   2,2,2
};

unsigned char disp1[38][8]={
{0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C},//0
{0x10,0x18,0x14,0x10,0x10,0x10,0x10,0x10},//1
{0x7E,0x2,0x2,0x7E,0x40,0x40,0x40,0x7E},//2
{0x3E,0x2,0x2,0x3E,0x2,0x2,0x3E,0x0},//3
{0x8,0x18,0x28,0x48,0xFE,0x8,0x8,0x8},//4
{0x3C,0x20,0x20,0x3C,0x4,0x4,0x3C,0x0},//5
{0x3C,0x20,0x20,0x3C,0x24,0x24,0x3C,0x0},//6
{0x3E,0x22,0x4,0x8,0x8,0x8,0x8,0x8},//7
{0x0,0x3E,0x22,0x22,0x3E,0x22,0x22,0x3E},//8
{0x3E,0x22,0x22,0x3E,0x2,0x2,0x2,0x3E},//9
{0x8,0x14,0x22,0x3E,0x22,0x22,0x22,0x22},//A
{0x3C,0x22,0x22,0x3E,0x22,0x22,0x3C,0x0},//B
{0x3C,0x40,0x40,0x40,0x40,0x40,0x3C,0x0},//C
{0x7C,0x42,0x42,0x42,0x42,0x42,0x7C,0x0},//D
{0x7C,0x40,0x40,0x7C,0x40,0x40,0x40,0x7C},//E
{0x7C,0x40,0x40,0x7C,0x40,0x40,0x40,0x40},//F
{0x3C,0x40,0x40,0x40,0x40,0x44,0x44,0x3C},//G
{0x44,0x44,0x44,0x7C,0x44,0x44,0x44,0x44},//H
{0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x7C},//I
{0x3C,0x8,0x8,0x8,0x8,0x8,0x48,0x30},//J
{0x0,0x24,0x28,0x30,0x20,0x30,0x28,0x24},//K
{0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7C},//L
{0x81,0xC3,0xA5,0x99,0x81,0x81,0x81,0x81},//M
{0x0,0x42,0x62,0x52,0x4A,0x46,0x42,0x0},//N
{0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C},//O
{0x3C,0x22,0x22,0x22,0x3C,0x20,0x20,0x20},//P
{0x1C,0x22,0x22,0x22,0x22,0x26,0x22,0x1D},//Q
{0x3C,0x22,0x22,0x22,0x3C,0x24,0x22,0x21},//R
{0x0,0x1E,0x20,0x20,0x3E,0x2,0x2,0x3C},//S
{0x0,0x3E,0x8,0x8,0x8,0x8,0x8,0x8},//T
{0x42,0x42,0x42,0x42,0x42,0x42,0x22,0x1C},//U
{0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18},//V
{0x0,0x49,0x49,0x49,0x49,0x2A,0x1C,0x0},//W
{0x0,0x41,0x22,0x14,0x8,0x14,0x22,0x41},//X
{0x41,0x22,0x14,0x8,0x8,0x8,0x8,0x8},//Y
{0x0,0x7F,0x2,0x4,0x8,0x10,0x20,0x7F},//Z
};

/* General byte wise write */
void Write_Max7219_byte(unsigned char DATA) 
{   
        unsigned char i;
        
        for(i=8;i>=1;i--)
        {     
             // Serial.println(digitalRead(5));
             digitalWrite(Max7219_pinCLK,LOW);
             digitalWrite(Max7219_pinDIN,DATA&0x80);// Extracting a bit data
             DATA = DATA<<1;
             digitalWrite(Max7219_pinCLK,HIGH);
        }  
}

/* 3*3 LED write */
void Write_Max7219(unsigned char address,unsigned char dat,unsigned char LED_position)
{
       PORTD = (PORTD&0x0f)|(LED_position<<4);
       Write_Max7219_byte(address);           //address，code of LED
       Write_Max7219_byte(dat);               //data，figure on LED
       PORTD=(PORTD&0x0f)|0xf0;
}

/* Init LED chip */
void Init_MAX7219(void)
{
       int i ;
       
       for (i=0;i<9;i++){
          Write_Max7219(0x09, 0x00,i);       //decoding ：BCD
          Write_Max7219(0x0a, 0x03,i);       //brightness 
          Write_Max7219(0x0b, 0x07,i);       //scanlimit；8 LEDs
          Write_Max7219(0x0c, 0x01,i);       //power-down mode：0，normal mode：1
          Write_Max7219(0x0f, 0x00,i);       //test display：1；EOT，display：0
       }
 
}

/* Empty LED */
void LED_empty(){
       int S_time=0;
       int j;
       int i;
       
       for(j=0;j<19;j++)
       {
         for(i=1;i<9;i++){
            Write_Max7219(i,pattern[EMPTY][i-1],S_time);
         }
         S_time++;     
       } 
}

/* General Initialization */
void setup()
{
      //Initial Serial      
      //declear CS DIN
      pinMode(Max7219_pinCLK,OUTPUT);
      pinMode(Max7219_pinDIN,OUTPUT);

      //declear PIN 0 to 7
      DDRD = B11111111;

      //init 3*3 LED module
      Init_MAX7219();

      //empty 3*3 LED module
      LED_empty();
}

/* Set single LED */
void LED_set(int LED_position, int LED_pattern){
     int i;
     
     for(i=1; i<9; i++){
        Write_Max7219(i,pattern[LED_pattern][i-1],LED_position);
     }
     
     LED_status_set(LED_position, LED_pattern);
}

/* Refresh LED */
void LED_refresh(){
     int i;
  
     for(i = 0; i < 9; i++){
        if(CROSS == LED_status[i]){
          continue;
        }
        LED_set(i, LED_status[i]);
     }
}

/* Set Status Game */
void LED_status_set(int LED_position, int LED_pattern) {
     LED_status[LED_position] = LED_pattern;
}

/*
 * Game Main Body
 */
void loop()
{ 
    LED_set(6,0);
    LED_refresh();
    LED_Game_Print();
    LED_set(3,0);
    LED_refresh();
    LED_Game_Print();
    while(1){};
}
